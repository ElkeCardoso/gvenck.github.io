library("MeSH.Bta.eg.db")
library("corrplot")
library("meshes")
library("GOSemSim")
library("tagcloud")
library("RColorBrewer")
install.package("org.Bt.eg.db")
install.package("GOstats")
install.package("meshr")
install.package("MeSH.db")
install.package("MeSH.Bta.eg.db")
install.package("corrplot")
install.package("meshes")
install.package("GOSemSim")
install.package("tagcloud")
source("https://bioconductor.org/biocLite.R")
biocLite("org.Bt.eg.db")
library("biomaRt")
library("readxl")
library("org.Bt.eg.db")
library("GOstats")
biocLite("GOstats")
library("GOstats")
library("meshr")
biocLite("meshr")
?file.path
?find_root_file
library("GOstats")
library("meshr")
library("MeSH.db")
library("MeSH.Bta.eg.db")
biocLite("MeSH.Bta.eg.db")
library("MeSH.Bta.eg.db")
library("corrplot")
library("meshes")
biocLite("meshes")
library("meshes")
library("GOSemSim")
library("tagcloud")
biocLite("tagcloud")
library("biomaRt")
library("readxl")
library("org.Bt.eg.db")
library("GOstats")
library("meshr")
library("MeSH.db")
library("MeSH.Bta.eg.db")
library("corrplot")
library("meshes")
library("GOSemSim")
library("tagcloud")
library("RColorBrewer")
library(corrplot)
goListBP <- summary(BP)[, c(1)][1:50]  # top 50
d.goBP <- godata("org.Bt.eg.db", ont = "BP", computeIC = TRUE)
goSimMatBP <- mgoSim(goListBP, goListBP, semData = d.goBP, measure = "Wang",
combine = NULL)
corrplot(goSimMatBP, is.corr = FALSE, type = "lower", tl.col = "black", tl.cex = 0.5)
install.packages("googleformr")
form_id <- "https://docs.google.com/forms/d/1O7IwwrXgZCGoBrUCPzt3SVvW9XerfVg2J_6_fbzVqmU/"
post_answers <- gformr(form_id)
library(googleformr)
post_answers <- gformr(form_id)
get_form_str(form_id)
post_this <- c("um", "texto dois")
post_answers(post_content=post_this)
1:7
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
help("array")
minha_lista <- list(campo1, tapply(campo1$altura, campo1$idade, mean), W)
minha_lista <- list(campo1 = campo1, media_alt = tapply(campo1$altura, campo1$idade, mean), matrix_ex = W)
meu_array <- array(1:12, dim = c(2,3,4))
meu_array
(meu_array <- array(1:12, dim = c(2,3,2,2)))
(meu_array <- array(1:12, dim = c(2,3,2,4)))
(meu_array <- array(1:12, dim = c(2,3,4)))
(meu_array <- array(1:24, dim = c(2,3,4)))
(meu_array <- array(1:24, dim = c(2,3,5)))
(meu_array <- array(1:24, dim = c(2,3,4)))
ex_mat <- matrix(seq(0,21,3), nrow = 2)
lapply(ex_mat, sum,2 )
lapply(ex_mat, sum,1)
dim(ex_mat)
lapply(ex_mat, sum,1)
ex_mat
?lapply
lapply(ex_mat, sum)
lapply(ex_mat, sum,2)
seq(0,42,4)
seq(0,21,3)
seq(0,42,5)
seq(0,41,5)
seq(0,39,5)
seq(0,13,2)
seq(0,14,2)
ex_list <- list(A=matrix(seq(0,21,3), nrow = 2),
B=matrix(seq(0,14,2), nrow = 2),
C= matrix(seq(0,39,5), nrow = 2))
dim(ex_mat)
str(ex_mat)
str(ex_list)
lapply(ex_list, "[",2)
lapply(ex_list, "[",, 2)
ex_list
lapply(ex_list, "[", 1, 2)
sapply(ex_list, "[", , 2)
sapply(ex_list, "[",1 , 2)
mapply(rep,1,4)
mapply(rep,1:2,4)
mapply(seq,1:2,4)
sapply(ex_list, "[",1)
sapply(ex_list, "[",1,3)
dados <- read.csv(file = "respostas.csv", stringsAsFactors = FALSE, na.strings="-")
setwd("~/github/gvenck.github.io/cursoR")
dados <- read.csv(file = "respostas.csv", stringsAsFactors = FALSE, na.strings="-")
colnames(dados) <- c("Data_pesq", "Idade", "Niver", "Genero", "Cidade",
"Altura","Peso", "Area", "ConhecimentoR", "Outras_linguagens",
"Utilizacao", "Motivacao")
str(dados)
dados$Area <- as.factor(dados$Area)
tapply(dados$ConhecimentoR, dados$Area, mean)
prim_funcao <- function(x,y){
print(x,y)
}
prim_funcao(3,5)
prim_funcao <- function(x,y){
cat(x,y)
}
prim_funcao(3,5)
myfuncao(3,5)
myfuncao <- function(x,y){
cat(x,y)
}
myfuncao(3,5)
myfuncao(4,1)
str(dados)
myfuncao(3,5)
myfuncao <- function(x,y){
cat(x,y)
return(x+y)
}
myfuncao(3,5)
myfuncao <- function(x,y){
cat(x,y,"\n")
return(x+y)
}
myfuncao(3,5)
myfuncao(4,1)
setwd("~/Documents/github/gvenck.github.io/cursoR")
dados <- read.csv(file = "respostas.csv", stringsAsFactors = FALSE, na.strings="-")
colnames(dados) <- c("Data_pesq", "Idade", "Niver", "Genero", "Cidade",
"Altura","Peso", "Area", "ConhecimentoR", "Outras_linguagens",
"Utilizacao", "Motivacao")
str(dados)
str(dados)
# Certifique-se que esta lidando com variável categórica (fator)
dados$Genero <- as.factor(dados$Genero)
tapply(dados$Altura, dados$Genero, summary)
tapply(dados$Altura, dados$Genero, summary)
tapply(dados$Peso, dados$Genero, summary)
aov(Peso ~ Gênero, data = dados)
aov(Peso ~ Genero, data = dados)
mod1 <- aov(Peso ~ Genero, data = dados)
anova(mod1)
?aov
mod1 <- lm(Peso ~ Genero, data = dados)
anova(mod1)
summary(mod1)
mod1 <- aov(Peso ~ Genero, data = dados)
summary(mod1)
anova(mod1)
dados$Area <- as.factor(dados$Area)
mod1 <- lm(ConhecimentoR ~ Area, data = dados)
summary(mod1)
library(ggmap) # Este comando será necessário toda vez que for utilizar o pacote
cat("Hello world")
# cat("Hello world")
# Iniciando os trabalhos no R
cat("Hello world")
((13+2+1.5)/3) + log(96, base = 4)
c(1,3,2,5,2)
1:10
seq(from=0, to=100, by=5)
# ou
seq(0,100,5) # Se você já souber a ordem dos argumentos da função
seq(from=4, to=30, by=3)
rep(3:5, 2)
x = c(30.1,30.4,40,30.2,30.6,40.1)
# ou
x <- c(30.1,30.4,40,30.2,30.6,40.1)
y = c(0.26,0.3,0.36,0.24,0.27,0.35)
x
x*2
x + y
x*y
z <- (x+y)/2
z
sum(z)  # soma dos valores de z
mean(z) # média
var(z)  # variância
z[3]
z[2:4]
str(z)
clone <- c("GRA02", "URO01", "URO03", "GRA02", "GRA01", "URO01")
clone_fator <- as.factor(clone)
str(clone_fator)
levels(clone_fator)
length(clone_fator)
logico <- x > 40
logico   # Os elementos são maiores que 40?
which(logico)  # Obtendo as posiçoes dos elementos TRUE
x[which(logico)] # Obtendo os números maiores que 40 do vetor x pela posição
(a <- 1:10)
b <- seq(from = 0.1, to = 1, 0.1)
(b <- b*10)
a==b
a==round(b)
errado <- c(TRUE, "vish", 1)
errado
X <- matrix(1:12, nrow = 6, ncol = 2)
X
W <- matrix(c(x,y), nrow = 6, ncol =2)
W
X*2
X*X
X%*%t(X)          # Multiplicação matricial
W[4,2] # Número posicionado na linha 1 e coluna 4
colnames(W) <- c("altura", "diametro")
rownames(W) <- clone
W
campo1 <- data.frame("clone" = clone,     # Antes do sinal de "="
"altura" = x,        # estabelecemos os nomes
"diametro" = y,      # das coluna
"idade" = rep(3:5, 2),
"corte"= logico)
campo1
campo1$idade
campo1[,4]
campo1[1,2]
campo1[3,3]
volume <- 3.14*((campo1$diametro/2)^2)*campo1$altura
volume
campo1 <- cbind(campo1, volume)
str(campo1)
minha_lista <- list(campo1 = campo1, media_alt = tapply(campo1$altura, campo1$idade, mean), matrix_ex = W)
str(minha_lista)
minha_lista[[1]]
# ou
minha_lista$campo1
(meu_array <- array(1:24, dim = c(2,3,4)))
library(cursoR)
data("dados")
str(dados)
# também
dim(dados)
colnames(dados) <- c("Data_pesq", "Idade", "Niver", "Genero", "Cidade",
"Altura","Peso", "Area", "ConhecimentoR", "Outras_linguagens",
"Utilizacao", "Motivacao")
str(dados)
nrow(dados)
if(2 >3){
print("dois é maior que três")
} else {
print("dois não é maior que três")
}
if(dados[3,9] == 0){
print("Nunca é tarde para começar!")
} else {
print("Já pegou o embalo, agora é só continuar!")
}
if(dados[7,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[3,9] > 0 && dados[3,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
switch(dados[5,8],
Exatas = print("Será que aprendeu alguma linhagem de programação na graduação?"),
Interdiciplinar = print("Em que foi a gradução?"),
print("Ta aqui colocando o pezinho na exatas")
)
for(i in 1:10){
print(i)
}
test <- vector()
for(i in 1:10){
test[i] <- i+4
}
test
for(i in 1:nrow(dados)){
if(dados[i,9] == 0){
print("Nunca é tarde para começar!")
} else if (dados[i,9] > 0 && dados[i,9] < 5){
print("Já pegou o embalo, agora é só continuar!")
} else {
print("Nos avise se estivermos falando algo errado...hehe")
}
}
# Exemplo do uso da função grepl
grepl("-", dados[1,5]) # A primeira linha contem o caracter "-"
for(i in 1:nrow(dados)){
if(grepl("-", dados[i,5])){
cat("Esse/a seguiu o exemplo direitinho. Parabéns!\n")
} else {
cat("Precisamos adicionar mais informações na linha", i, "\n")
}
}
corrigir <- vector()
for(i in 1:nrow(dados)){
if(grepl("-", dados[i,5])){
cat("Esse/a seguiu o exemplo direitinho. Parabéns!\n")
} else {
cat("Precisamos adicionar mais informações na linha", i, "\n")
corrigir <- c(corrigir, i)
}
}
corrigir
dados$Cidade[corrigir]
correcao <- c("Piracicaba-SP", "Rio das Pedras-SP", "Teófilo Otoni-MG", "Piracicaba-SP", "São Paulo-SP",
"São Carlos-SP", "São Paulo-SP", "Catanduva-SP")
dados$Cidade[corrigir] <- correcao
dados$Cidade[corrigir]
dados$Cidade
x <- 1
while(x < 5){
x <- x + 1
print(x)
}
x <- 1
while(x < 5){
x <- x + 1
if(x==4) break
print(x)
}
x <- 1
while(x < 5){
x <- x + 1
if(x==4) next
print(x)
}
x <- 1
repeat{
x <- x+1
print(x)
if(x==4) break
}
# Criando uma matrix vazia
ex_mat <- matrix(nrow=10, ncol=10)
# cada número dentro da matrix será o produto no índice da coluna pelo índice da linha
for(i in 1:dim(ex_mat)[1]) {
for(j in 1:dim(ex_mat)[2]) {
ex_mat[i,j] = i*j
}
}
# Criando uma matrix vazia
ex_mat <- matrix(nrow=10, ncol=10)
# cada número dentro da matrix será o produto no índice da coluna pelo índice da linha
for(i in 1:dim(ex_mat)[1]) {   # Primeiro nível, não tem espaço
for(j in 1:dim(ex_mat)[2]) { # Segundo nível tem um espaço (tab)
ex_mat[i,j] = i*j          # Terceiro nível tem dois espaços
}                            # Fechei o segundo nível
}                              # Fechei o primeiro nível
ex_mat <- matrix(seq(0,21,3), nrow = 2)
apply(ex_mat, 2, sum)
apply(ex_mat, 1, sum)
# Soma das colunas
for(i in 1:dim(ex_mat)[2]){
print(sum(ex_mat[,i]))
}
# Soma das linhas
for(i in 1:dim(ex_mat)[1]){
print(sum(ex_mat[i,]))
}
ex_list <- list(A=matrix(seq(0,21,3), nrow = 2),
B=matrix(seq(0,14,2), nrow = 2),
C= matrix(seq(0,39,5), nrow = 2))
str(ex_list)
lapply(ex_list, "[", , 2)
sapply(ex_list, "[",1,3)
str(dados)
dados$Area <- as.factor(dados$Area)
tapply(dados$ConhecimentoR, dados$Area, mean)
quadra <- function(x){
z <- x*x
return(z)
}
quadra(3)
quadra(4)
qualquer_nome <- 4
quadra(qualquer_nome)
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- dados$Peso/quadra(dados$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(dados$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(dados$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(dados$Genero == "Feminino"))/length(dados$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
minha_funcao <- function(df.entrada){
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- df.entrada$Peso/quadra(df.entrada$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(df.entrada$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(df.entrada$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(df.entrada$Genero == "Feminino"))/length(df.entrada$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
return(final_list)
}
test_list <- minha_funcao(df.entrada = dados)
test_list
minha_funcao <- function(df.entrada){
if (length(grep("Altura", colnames(df.entrada))) == 0 ||
length(grep("Peso", colnames(df.entrada))) == 0 ||
length(grep("Idade", colnames(df.entrada))) == 0 ||
length(grep("Genero", colnames(df.entrada))) == 0)
stop("Esta faltando alguma das informações.")
## Calcula o índice de massa corporal (IMC) dos participantes
IMC <- df.entrada$Peso/quadra(df.entrada$Altura)
## Calcula a média das idade dos participantes
id_med <- mean(df.entrada$Idade)
## Calcula a mediana das idades dos participantes
id_median <- median(df.entrada$Idade)
## Calcula a porgentagem de mulheres entre os participantes
mul <- 100*(length(which(df.entrada$Genero == "Feminino"))/length(df.entrada$Genero))
## Faz uma lista com todos os resultados
final_list <- list(IMC=IMC, idade_media = id_med,
idade_mediana = id_median, porcentagem_mulheres = mul)
return(final_list)
}
test_list <- minha_funcao(df.entrada = dados)
#### Bar plot ####
#É um gráfico interessante quando possuímos resultados da função table
gen <- table(dados$Genero)
barplot(gen)
nota_gen <- table(dados$ConhecimentoR, dados$Genero)
barplot(t(nota_gen))
#Busque explorar mais parâmetros no gráfico a seguir:
##Dica: tente alterar o nome dos eixos
plot(x = dados$Peso, y= dados$Altura)
#Linha de ajuste
abline(lm(Altura ~ Peso, data = dados), col="red")
#Verificar a correlação:
cor(dados$Altura, dados$Peso)
#1-) Fazer a divisão da tela:
par(mfrow=c(1,2))
#2-) Criar o barplot, da maneira que já aprendemos:
##Criar a tabela considerando as informacoes de Area e Genero
nota_gen <-table(dados$Area, dados$Genero)
##Note o parâmetro beside (que estava nas dicas)
barplot(t(nota_gen),beside = TRUE, col = c("wheat", "tomato2"), main = "Distribuição das
pessoas \n de acordo com área e nota do R", xlab = "Nota do R")
##Colocar a legenda no gráfico
legend("topright", title = "Gênero", legend=c("F","M"), fill = c("wheat", "tomato2"), bty = "n", cex = 0.7)
#3-) Criar o dotchart #Criar a coluna atribuindo uma cor para cada área
dados$color[dados$Area=="Exatas"] <- "darkblue"
dados$color[dados$Area=="Biologicas"] <- "darkgreen"
dados$color[dados$Area=="Humanas"] <- "orange"
dados$color[dados$Area=="Interdiciplinar"] <- "red"
dados$color[dados$Area=="Agrarias"] <- "black"
##Colocar os pesos em ordem:
dados <- dados[order(dados$Peso),]
##Colocar o título, note que o '\n' está sendo usado para fazer a quebra de linha:
dotchart(dados$Peso, labels = dados$Cidade, groups = as.factor(dados$Area),
color = dados$color, font=2, main = "Peso de acordo com as cidades, \n agrupando por área",
xlab = "Peso", pch = 7)
#4-) Manter novamente uma figura por gráfico
par(mfrow=c(1,1))
library(ggmap) # Este comando será necessário toda vez que for utilizar o pacote
part1 <- geocode(dados$Cidade[1])
dados$Cidade
dados$Cidade[1]
part1 <- geocode(dados$Cidade[1])
geocode("Belém")
geocode("Belém - PA")
geocode("Belém - PA")
dados$Cidade[1]
dados
dados$Cidade
geocode(as.character(dados$Cidade[1]))
as.character(dados$Cidade)
dados$Genero
coord <- data.frame()
for(i in 1:nrow(dados)){
coord <- rbind(coord,geocode(as.character(dados$Cidade[i])))
}
for(i in 1:nrow(dados)){
coord <- rbind(coord,geocode(as.character(dados$Cidade)[i]))
}
coord
indc <- which(is.na(coord[,1]))
while(length(indc) >0){
coord_up <- data.frame()
for(i in 1:length(indc)){
coord_up <- rbind(coord_up,geocode(as.character(dados$Cidade)[indc][i]))
}
coord[indc,] <- coord_up
indc <- which(is.na(coord[,1]))
}
coord
library(devtools)
install_github("gvenck/cursoR")
